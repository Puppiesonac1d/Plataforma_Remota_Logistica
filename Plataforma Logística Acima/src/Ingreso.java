
import clases.Conexion;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.BarcodeQRCode;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author The_S
 */
public class Ingreso extends javax.swing.JFrame {

    Conexion con = new Conexion();
    Connection cn = con.conecta();

    public Ingreso() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel39 = new javax.swing.JPanel();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        jScrollPane10 = new javax.swing.JScrollPane();
        jPanel14 = new javax.swing.JPanel();
        jLabel73 = new javax.swing.JLabel();
        cmbTransporte = new javax.swing.JComboBox<>();
        cmbBodega = new javax.swing.JComboBox<>();
        jLabel74 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        panelIngresoProducto = new javax.swing.JPanel();
        jLabel48 = new javax.swing.JLabel();
        txtIDproductoIngreso = new javax.swing.JTextField();
        jLabel68 = new javax.swing.JLabel();
        txtStockIngresado = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        txtSKUIngreso = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        txtNombreProductoIngreso = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        btnConfirmarInfoProd = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        tblProductosEnNC = new javax.swing.JTable();
        btnIngresarMercadería = new javax.swing.JButton();
        jLabel52 = new javax.swing.JLabel();
        btnBorrar = new javax.swing.JButton();
        cmbSeccionBodega = new javax.swing.JComboBox();
        jLabel55 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        txtNC = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        tblProductosAIngresar = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtNumFactura = new javax.swing.JTextField();
        txtGuiaDespacho = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDistribuidor = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        lblNC = new javax.swing.JLabel();
        lblEmpresa = new javax.swing.JLabel();
        lblOC = new javax.swing.JLabel();
        btnVolver5 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(247, 247, 247));
        setMinimumSize(new java.awt.Dimension(1280, 720));

        jPanel39.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTabbedPane5.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N

        jLabel73.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel73.setText("Transporte:");

        cmbTransporte.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        cmbTransporte.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Transporte", "Acima", "Transporte Externo" }));

        cmbBodega.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N

        jLabel74.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel74.setText("Bodega:");

        panelIngresoProducto.setVisible(false);
        panelIngresoProducto.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelIngresoProducto.setEnabled(false);

        jLabel48.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel48.setText("ID de Producto:");

        txtIDproductoIngreso.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N

        jLabel68.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel68.setText("Stock a Ingresar:");

        txtStockIngresado.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N

        jLabel40.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel40.setText("SKU interno:");

        txtSKUIngreso.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N

        jLabel41.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel41.setText("Nombre de Producto:");

        txtNombreProductoIngreso.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N

        jLabel61.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel61.setForeground(new java.awt.Color(198, 0, 0));
        jLabel61.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel61.setText("*Nota: No toda la información de un producto estará disponible en la nota de compra");

        jLabel50.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel50.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel50.setText("Información del Producto:");

        btnConfirmarInfoProd.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnConfirmarInfoProd.setText("2-. Confirmar Información de Producto");
        btnConfirmarInfoProd.setToolTipText("");
        btnConfirmarInfoProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarInfoProdActionPerformed(evt);
            }
        });

        tblProductosEnNC = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int celIndex){
                return false;
            }
        };
        tblProductosEnNC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Orden de Compra", "ID de Producto", "SKU", "Nombre de Producto", "Stock a Ingresar"
            }
        ));
        tblProductosEnNC.getTableHeader().setReorderingAllowed(false);
        jScrollPane8.setViewportView(tblProductosEnNC);

        btnIngresarMercadería.setBackground(new java.awt.Color(51, 204, 0));
        btnIngresarMercadería.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnIngresarMercadería.setText("3-. Confirmar Ingreso de Productos");
        btnIngresarMercadería.setToolTipText("");
        btnIngresarMercadería.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnIngresarMercadería.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarMercaderíaActionPerformed(evt);
            }
        });

        jLabel52.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel52.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel52.setText("Productos en el Ingreso:");

        btnBorrar.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnBorrar.setText("Borrar producto de lista");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelIngresoProductoLayout = new javax.swing.GroupLayout(panelIngresoProducto);
        panelIngresoProducto.setLayout(panelIngresoProductoLayout);
        panelIngresoProductoLayout.setHorizontalGroup(
            panelIngresoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelIngresoProductoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelIngresoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelIngresoProductoLayout.createSequentialGroup()
                        .addComponent(btnBorrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnIngresarMercadería)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel50, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel52, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel61, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelIngresoProductoLayout.createSequentialGroup()
                        .addGroup(panelIngresoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel48)
                            .addComponent(jLabel40)
                            .addComponent(jLabel41)
                            .addComponent(jLabel68))
                        .addGap(57, 57, 57)
                        .addGroup(panelIngresoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSKUIngreso)
                            .addComponent(txtIDproductoIngreso)
                            .addComponent(txtNombreProductoIngreso)
                            .addComponent(txtStockIngresado)
                            .addComponent(btnConfirmarInfoProd, javax.swing.GroupLayout.DEFAULT_SIZE, 917, Short.MAX_VALUE))))
                .addContainerGap())
        );
        panelIngresoProductoLayout.setVerticalGroup(
            panelIngresoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelIngresoProductoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel50)
                .addGap(10, 10, 10)
                .addComponent(jLabel61)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelIngresoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIDproductoIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel48))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelIngresoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(txtSKUIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelIngresoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(txtNombreProductoIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelIngresoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel68)
                    .addComponent(txtStockIngresado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConfirmarInfoProd)
                .addGap(10, 10, 10)
                .addComponent(jLabel52)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelIngresoProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBorrar)
                    .addComponent(btnIngresarMercadería))
                .addContainerGap())
        );

        cmbSeccionBodega.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N

        jLabel55.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel55.setText("Sección de Bodega:");

        jLabel59.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel59.setText("Número de Nota de Compra:");

        txtNC.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        txtNC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNCKeyPressed(evt);
            }
        });

        jButton6.setVisible(false);
        jButton6.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jButton6.setText("1-. Buscar Nota de Venta - Compra");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        tblProductosAIngresar = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int celIndex){
                return false;
            }
        };
        tblProductosAIngresar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblProductosAIngresar.getTableHeader().setReorderingAllowed(false);
        tblProductosAIngresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblProductosAIngresarMouseClicked(evt);
            }
        });
        tblProductosAIngresar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblProductosAIngresarKeyPressed(evt);
            }
        });
        jScrollPane9.setViewportView(tblProductosAIngresar);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setText("N° de Factura:");

        txtNumFactura.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        txtGuiaDespacho.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel2.setText("Guía de Despacho:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel3.setText("Distribuidor:");

        txtDistribuidor.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        txtDistribuidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDistribuidorActionPerformed(evt);
            }
        });
        txtDistribuidor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDistribuidorKeyPressed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Productos Solicitados");

        lblNC.setVisible(false);
        lblNC.setText("jLabel5");

        lblEmpresa.setVisible(false);
        lblEmpresa.setText("jLabel5");

        lblOC.setVisible(false);
        lblOC.setText("jLabel5");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel76)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel14Layout.createSequentialGroup()
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel73, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel74, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel59)
                                    .addComponent(jLabel3)
                                    .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 256, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNC)
                                    .addComponent(txtDistribuidor)
                                    .addComponent(cmbTransporte, 0, 429, Short.MAX_VALUE)
                                    .addComponent(cmbBodega, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtNumFactura)
                                    .addComponent(txtGuiaDespacho))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel14Layout.createSequentialGroup()
                                        .addComponent(jLabel55)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbSeccionBodega, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel14Layout.createSequentialGroup()
                                        .addComponent(lblNC)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblEmpresa)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblOC))
                                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(9, 9, 9))
                            .addComponent(jScrollPane9)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelIngresoProducto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(10, 10, 10))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel76)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel59)
                    .addComponent(txtNC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtDistribuidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNC)
                    .addComponent(lblEmpresa)
                    .addComponent(lblOC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel73)
                    .addComponent(cmbTransporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbBodega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel55)
                    .addComponent(cmbSeccionBodega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel74))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNumFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGuiaDespacho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jButton6))
                .addGap(7, 7, 7)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(panelIngresoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane10.setViewportView(jPanel14);

        jTabbedPane5.addTab("Formulario de ingreso de mercadería", jScrollPane10);

        btnVolver5.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnVolver5.setText("Volver");
        btnVolver5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolver5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel39Layout = new javax.swing.GroupLayout(jPanel39);
        jPanel39.setLayout(jPanel39Layout);
        jPanel39Layout.setHorizontalGroup(
            jPanel39Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel39Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel39Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1236, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel39Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnVolver5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel39Layout.setVerticalGroup(
            jPanel39Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel39Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnVolver5)
                .addContainerGap())
        );

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/acima-logo-200p.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConfirmarInfoProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarInfoProdActionPerformed
        try {
            //Agregar los productos a la lista
            int i = tblProductosAIngresar.getSelectedRow();
            int verificar = Integer.parseInt(tblProductosAIngresar.getValueAt(i, 5).toString());
            String oc = tblProductosAIngresar.getValueAt(i, 0).toString();
            if (verificar <= 0) {
                JOptionPane.showMessageDialog(null, "La cantidad de producto es 0, no puede restar mas de la lista");
            } else {
                int indexs = tblProductosAIngresar.getRowCount();
                Object[] row = new Object[5];
                DefaultTableModel modeloNuevo = (DefaultTableModel) tblProductosEnNC.getModel();
                row[0] = oc;
                row[1] = txtIDproductoIngreso.getText();
                row[2] = txtSKUIngreso.getText();
                row[3] = txtNombreProductoIngreso.getText();
                row[4] = txtStockIngresado.getText();
                modeloNuevo.addRow(row);

                JOptionPane.showMessageDialog(null, "Producto Agregado a la lista");
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error: " + ex.getMessage());
        }
    }//GEN-LAST:event_btnConfirmarInfoProdActionPerformed

    private void btnIngresarMercaderíaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarMercaderíaActionPerformed

        //Realizar el ingreso X productos
        DefaultTableModel model = (DefaultTableModel) tblProductosEnNC.getModel();
        int rowcount = tblProductosEnNC.getRowCount();
        //Se va a hacer un insert X producto
        for (int i = 0; i < rowcount; i++) {
            try {
                String query3 = "INSERT INTO ingreso(`numeroCotizacion`,codigoOrdenCompra,`notaventa`, `nombreDistribuidor`,numeroFactura,guiaDespachoProveedor, "
                        + "`tipoTransporte`, `idBodega`,`IDProducto`,`SKU`,"
                        + "`codigoGeneradoQR`,`StockIngresado`,`tipoIngreso`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
                PreparedStatement pst2 = cn.prepareStatement(query3);
                pst2.setString(1, lblNC.getText());
                pst2.setString(2, model.getValueAt(i, 0).toString());
                pst2.setString(3, txtNC.getText());
                pst2.setString(4, txtDistribuidor.getText());
                pst2.setString(5, txtNumFactura.getText());
                pst2.setString(6, txtGuiaDespacho.getText());
                pst2.setString(7, cmbTransporte.getSelectedItem().toString());
                pst2.setInt(8, cmbBodega.getSelectedIndex());
                pst2.setString(9, model.getValueAt(i, 1).toString());
                pst2.setString(10, model.getValueAt(i, 2).toString());
                pst2.setString(11, "");
                pst2.setString(12, model.getValueAt(i, 4).toString());
                pst2.setString(13, "Ingreso realizado por 'Ingreso de Mercadería'");
                int up = pst2.executeUpdate();

                //Sumar Stock
                String queryINV = "UPDATE INVENTARIO SET STOCK = stock + ? WHERE IDPRODUCTO = ?";
                PreparedStatement pstINV = cn.prepareStatement(queryINV);
                pstINV.setInt(1, Integer.parseInt(tblProductosEnNC.getValueAt(i, 4).toString()));
                pstINV.setString(2, tblProductosEnNC.getValueAt(i, 1).toString());
                int upINV = pstINV.executeUpdate();

                //Sacar el id de ingreso para el QR
                String queryIngreso = "SELECT MAX(idIngreso),stockIngresado FROM ingreso having MAX(idIngreso)";
                // create the java statement
                PreparedStatement pstIngreso = cn.prepareStatement(queryIngreso);
                // execute the query, and get a java resultset
                ResultSet rs = pstIngreso.executeQuery();
                // iterate through the java resultset
                int maxId = 0;

                int cantidad = 0;

                while (rs.next()) {
                    maxId = rs.getInt(1);
                    cantidad = rs.getInt(2);
                }

                String queryProductoIngresado = "update detalle_abastecimiento set estado = 'Ingresado' where numeroCotizacion = ? and codigoOrdenCompra = ? and codigoProducto = ?;";
                PreparedStatement pstProductoIngresado = cn.prepareStatement(queryProductoIngresado);
                pstProductoIngresado.setString(1, txtNC.getText());
                pstProductoIngresado.setString(2, tblProductosEnNC.getValueAt(i, 0).toString());
                pstProductoIngresado.setString(3, tblProductosEnNC.getValueAt(i, 1).toString());
                int upProductoIngresado = pstProductoIngresado.executeUpdate();

                String ruta = "";

                JFileChooser dlg = new JFileChooser();
                dlg.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                int option = dlg.showOpenDialog(this);

                if (option == JFileChooser.APPROVE_OPTION) {
                    File f = dlg.getSelectedFile();
                    ruta = f.toString();
                }

                Date sistHora = new Date();
                String pmAm = "hh:mm a";
                SimpleDateFormat format = new SimpleDateFormat(pmAm);
                Calendar hoy = Calendar.getInstance();
                String hora = (String.format(format.format(sistHora), hoy));
                hora = hora.replace(":", "-");
                SimpleDateFormat formato = new SimpleDateFormat("dd-MMM-YYYY");
                Date sistFecha = new Date();
                Document doc = new Document(new Rectangle(282, 424));

                PdfWriter writer = PdfWriter.getInstance(doc, new FileOutputStream(ruta + "\\" + "ingreso_" + txtNC.getText() + "_producto_" + model.getValueAt(i, 1).toString() + "_" + formato.format(sistFecha) + ".pdf"));

                doc.open();

                //Establecer imagen y escala
                ///Codigo QR
                BarcodeQRCode barcodeQRCode = new BarcodeQRCode("Acima Group - Ingreso " + maxId, 1000, 1000, null);
                com.itextpdf.text.Image codeQrImage = barcodeQRCode.getImage();
                codeQrImage.scaleAbsolute(50, 50);

                com.itextpdf.text.Image logoAcima = com.itextpdf.text.Image.getInstance("src\\imagenes\\acima-logo-400p.png");
                logoAcima.scaleAbsolute(64, 34);

                PdfPCell cell1 = new PdfPCell(logoAcima, false);
                cell1.setBorder(Rectangle.NO_BORDER);
                cell1.setBackgroundColor(BaseColor.WHITE);
                cell1.setHorizontalAlignment(Element.ALIGN_RIGHT);

                PdfPCell cellqr = new PdfPCell(codeQrImage, false);
                cellqr.setBorder(Rectangle.NO_BORDER);
                cellqr.setBackgroundColor(BaseColor.WHITE);
                cellqr.setHorizontalAlignment(Element.ALIGN_LEFT);

                //Crear Tabla
                PdfPTable tableHeader = new PdfPTable(1);
                tableHeader.setWidthPercentage(100);

                //tableHeader.addCell(cellqr);
                tableHeader.addCell(cell1);
                doc.add(tableHeader);

                //Separador
                PdfPTable myTable = new PdfPTable(1);
                myTable.setWidthPercentage(100.0f);
                PdfPCell myCell = new PdfPCell(new Paragraph(""));
                myCell.setBorder(Rectangle.BOTTOM);
                myTable.addCell(myCell);
                myTable.setSpacingAfter(5f);
                myTable.setSpacingBefore(5f);
                doc.add(myTable);

                //Crear Tabla de información
                PdfPTable tableInfoContacto = new PdfPTable(1);
                tableInfoContacto.setWidthPercentage(100);

                //Empresa
                Paragraph tituloEmpresa = new Paragraph("Empresa: ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, null));
                Paragraph empresa = new Paragraph(tituloEmpresa + lblEmpresa.getText(), FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                empresa.setAlignment(Paragraph.ALIGN_LEFT);
                doc.add(empresa);
                //Orden de Compra
                Paragraph oc = new Paragraph("Orden de Compra: " + lblOC.getText(), FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                oc.setAlignment(Paragraph.ALIGN_LEFT);
                doc.add(oc);
                //Ingreso
                Paragraph fechaIngreso = new Paragraph("Fecha de Ingreso de Mercadería: " + formato.format(sistFecha), FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                fechaIngreso.setAlignment(Paragraph.ALIGN_LEFT);
                doc.add(fechaIngreso);

                doc.add(myTable);

                //Nombre Producto
                Paragraph nombreProducto = new Paragraph("Nombre de Producto: " + model.getValueAt(i, 3).toString(), FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                nombreProducto.setAlignment(Paragraph.ALIGN_LEFT);
                doc.add(nombreProducto);
                //Sku
                Paragraph sku = new Paragraph("SKU: " + model.getValueAt(i, 2).toString(), FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                sku.setAlignment(Paragraph.ALIGN_LEFT);
                doc.add(sku);

                doc.add(myTable);

                //Numero de Ingreso
                Paragraph numeroIngreso = new Paragraph("Número de Ingreso: " + maxId, FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                numeroIngreso.setAlignment(Paragraph.ALIGN_LEFT);
                doc.add(numeroIngreso);

                doc.add(codeQrImage);
                /*
                        PdfContentByte cb = writer.getDirectContent();
                        Barcode128 barcode128 = new Barcode128();
                        barcode128.setCode("este es un codigo de barra muy largo...con mucha informacion innecesaria");
                        barcode128.setCodeType(Barcode.CODE128);
                        Image code128Image = barcode128.createImageWithBarcode(cb, null, null);
                        doc.add(code128Image);
                 */
                doc.add(myTable);

                doc.close();
            } catch (SQLException | DocumentException | IOException ex) {
                Logger.getLogger(Ingreso.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        int totalCantidadIngreso = 0;
        try {
            String queryCantIngreso = "SELECT sum(StockIngresado) FROM acimabasededatos.ingreso where notaVenta = ?;";
            PreparedStatement pstCantIngreso = cn.prepareStatement(queryCantIngreso);
            pstCantIngreso.setString(1, txtNC.getText());
            ResultSet rsCantIngreso = pstCantIngreso.executeQuery();
            while (rsCantIngreso.next()) {
                totalCantidadIngreso = rsCantIngreso.getInt("sum(StockIngresado)");
            }
        } catch (Exception ex) {
            System.out.println("error realizando la suma" + ex);
        }
        System.out.println("Cantidad de Productos Ingresados: " + totalCantidadIngreso);

        int sumatoriaStock = 0;
        for (int x = 0; x < tblProductosAIngresar.getRowCount(); x++) {
            sumatoriaStock = sumatoriaStock + Integer.parseInt(tblProductosAIngresar.getValueAt(x, 5).toString());
        }
        System.out.println("Sumatoria de Stock :" + sumatoriaStock);

        //ACTUALIZAR SI SE HAN INGRESADO TODOS LOS PRODUCTOS O NO
        if (sumatoriaStock == totalCantidadIngreso) {
            try {
                // create the java mysql update preparedstatement
                String query = "update abastecimiento set estado = 'Nota de compra ingresada' where numerocotizacion = ?";
                PreparedStatement preparedStmt = cn.prepareStatement(query);
                preparedStmt.setString(1, txtNC.getText());
                // execute the java preparedstatement
                preparedStmt.executeUpdate();
                JOptionPane.showMessageDialog(null, "Cotización validada: " + txtNC.getText());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Ha ocurrido un error: " + ex.getMessage());
            }
        } else if (sumatoriaStock != totalCantidadIngreso) {
            try {
                // create the java mysql update preparedstatement
                String query = "update abastecimiento set estado = 'Nota de compra ingresada con productos faltantes' where numerocotizacion = ?";
                PreparedStatement preparedStmt = cn.prepareStatement(query);
                preparedStmt.setString(1, txtNC.getText());
                // execute the java preparedstatement
                preparedStmt.executeUpdate();
                JOptionPane.showMessageDialog(null, "Cotización validada: " + txtNC.getText());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Ha ocurrido un error: " + ex.getMessage());
            }
        }
        this.dispose();

        /*
        //Metodo antiguo
        if (totalCantidadNV > 0) {
            //se estará ingresando con la cantidad faltante

            String[] options = new String[]{"Confirmar", "Cancelar"};

            int resp = JOptionPane.showOptionDialog(null, "Se está realizando el ingreso de mercadería con productos faltantes", null,
                    JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,
                    null, options, options[0]);

            if (resp == 0) {
                //En caso de confirmar...
                try {
                    int idBodega = 0;
                    String query = "select * from bodega where nombreBodega = ?";
                    PreparedStatement pst3 = cn.prepareStatement(query);
                    pst3.setString(1, cmbBodega.getSelectedItem().toString());
                    ResultSet rs3 = pst3.executeQuery();
                    while (rs3.next()) {
                        idBodega = rs3.getInt("idBodega");
                    }

                    try {
                        DefaultTableModel model = (DefaultTableModel) tblProductosEnNC.getModel();
                        int rowcount = tblProductosEnNC.getRowCount();
                        for (int i = 0; i < rowcount; i++) {
                            String query3 = "INSERT INTO ingreso(`numeroCotizacion`,`notaventa`, `nombreDistribuidor`,numeroFactura,guiaDespachoProveedor, "
                                    + "`tipoTransporte`, `idBodega`,`IDProducto`,`SKU`,"
                                    + "`codigoGeneradoQR`,`StockIngresado`,`tipoIngreso`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
                            PreparedStatement pst2 = cn.prepareStatement(query3);
                            pst2.setString(1, lblNC.getText());
                            pst2.setString(2, txtNC.getText());
                            pst2.setString(3, txtDistribuidor.getText());
                            pst2.setString(4, txtNumFactura.getText());
                            pst2.setString(5, txtGuiaDespacho.getText());
                            pst2.setString(6, cmbTransporte.getSelectedItem().toString());
                            pst2.setInt(7, cmbBodega.getSelectedIndex());
                            pst2.setString(8, model.getValueAt(i, 0).toString());
                            pst2.setString(9, model.getValueAt(i, 1).toString());
                            pst2.setString(10, "");
                            pst2.setString(11, model.getValueAt(i, 3).toString());
                            pst2.setString(12, "Ingreso realizado por 'Ingreso de Mercadería'");
                            int up = pst2.executeUpdate();

                            String queryINV = "UPDATE INVENTARIO SET STOCK = stock + ? WHERE IDPRODUCTO = ?";
                            PreparedStatement pstINV = cn.prepareStatement(queryINV);
                            pstINV.setInt(1, Integer.parseInt(tblProductosEnNC.getValueAt(i, 3).toString()));
                            pstINV.setString(2, tblProductosEnNC.getValueAt(i, 0).toString());
                            int upINV = pstINV.executeUpdate();

                            String queryIngreso = "SELECT MAX(idIngreso),stockIngresado FROM ingreso having MAX(idIngreso)";
                            // create the java statement
                            PreparedStatement pstIngreso = cn.prepareStatement(queryIngreso);
                            // execute the query, and get a java resultset
                            ResultSet rs = pstIngreso.executeQuery();
                            // iterate through the java resultset
                            int maxId = 0;

                            int cantidad = 0;

                            while (rs.next()) {
                                maxId = rs.getInt(1);

                                cantidad = rs.getInt(2);
                            }

                            String ruta = "";

                            JFileChooser dlg = new JFileChooser();
                            dlg.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                            int option = dlg.showOpenDialog(this);

                            if (option == JFileChooser.APPROVE_OPTION) {
                                File f = dlg.getSelectedFile();
                                ruta = f.toString();
                            }

                            Date sistHora = new Date();
                            String pmAm = "hh:mm a";
                            SimpleDateFormat format = new SimpleDateFormat(pmAm);
                            Calendar hoy = Calendar.getInstance();
                            String hora = (String.format(format.format(sistHora), hoy));
                            hora = hora.replace(":", "-");
                            SimpleDateFormat formato = new SimpleDateFormat("dd-MMM-YYYY");
                            Date sistFecha = new Date();
                            Document doc = new Document(new Rectangle(282, 424));

                            PdfWriter writer = PdfWriter.getInstance(doc, new FileOutputStream(ruta + "\\" + "ingreso_" + txtNC.getText() + "_producto_" + model.getValueAt(i, 1).toString() + "_" + formato.format(sistFecha) + ".pdf"));

                            doc.open();

                            //Establecer imagen y escala
                            ///Codigo QR
                            BarcodeQRCode barcodeQRCode = new BarcodeQRCode("Acima Group - Ingreso " + maxId, 1000, 1000, null);
                            com.itextpdf.text.Image codeQrImage = barcodeQRCode.getImage();
                            codeQrImage.scaleAbsolute(50, 50);

                            com.itextpdf.text.Image logoAcima = com.itextpdf.text.Image.getInstance("src\\imagenes\\acima-logo-400p.png");
                            logoAcima.scaleAbsolute(64, 34);

                            PdfPCell cell1 = new PdfPCell(logoAcima, false);
                            cell1.setBorder(Rectangle.NO_BORDER);
                            cell1.setBackgroundColor(BaseColor.WHITE);
                            cell1.setHorizontalAlignment(Element.ALIGN_RIGHT);

                            PdfPCell cellqr = new PdfPCell(codeQrImage, false);
                            cellqr.setBorder(Rectangle.NO_BORDER);
                            cellqr.setBackgroundColor(BaseColor.WHITE);
                            cellqr.setHorizontalAlignment(Element.ALIGN_LEFT);

                            //Crear Tabla
                            PdfPTable tableHeader = new PdfPTable(2);
                            tableHeader.setWidthPercentage(100);

                            tableHeader.addCell(cellqr);
                            tableHeader.addCell(cell1);
                            doc.add(tableHeader);

                            //Separador
                            PdfPTable myTable = new PdfPTable(1);
                            myTable.setWidthPercentage(100.0f);
                            PdfPCell myCell = new PdfPCell(new Paragraph(""));
                            myCell.setBorder(Rectangle.BOTTOM);
                            myTable.addCell(myCell);
                            myTable.setSpacingAfter(5f);
                            myTable.setSpacingBefore(5f);
                            doc.add(myTable);

                            //Crear Tabla de información
                            PdfPTable tableInfoContacto = new PdfPTable(1);
                            tableInfoContacto.setWidthPercentage(100);

                            //Empresa
                            Paragraph empresa = new Paragraph("Empresa: " + lblEmpresa.getText(), FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                            empresa.setAlignment(Paragraph.ALIGN_LEFT);
                            doc.add(empresa);
                            //Orden de Compra
                            Paragraph oc = new Paragraph("Orden de Compra: " + lblOC.getText(), FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                            oc.setAlignment(Paragraph.ALIGN_LEFT);
                            doc.add(oc);
                            //Ingreso
                            Paragraph fechaIngreso = new Paragraph("Fecha de Ingreso de Mercadería: " + formato.format(sistFecha), FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                            fechaIngreso.setAlignment(Paragraph.ALIGN_LEFT);
                            doc.add(fechaIngreso);

                            doc.add(myTable);

                            //Nombre Producto
                            Paragraph nombreProducto = new Paragraph("Nombre de Producto: " + model.getValueAt(i, 2).toString(), FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                            nombreProducto.setAlignment(Paragraph.ALIGN_LEFT);
                            doc.add(nombreProducto);
                            //Sku
                            Paragraph sku = new Paragraph("SKU: " + model.getValueAt(i, 1).toString(), FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                            sku.setAlignment(Paragraph.ALIGN_LEFT);
                            doc.add(sku);

                            doc.add(myTable);

                            //Numero de Ingreso
                            Paragraph numeroIngreso = new Paragraph("Número de Ingreso: " + maxId, FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                            numeroIngreso.setAlignment(Paragraph.ALIGN_LEFT);
                            doc.add(numeroIngreso);

                            doc.add(codeQrImage);

                            
                             PdfContentByte cb = writer.getDirectContent();
                             Barcode128 barcode128 = new Barcode128();
                             barcode128.setCode("este es un codigo de barra muy largo...con mucha informacion innecesaria");
                             barcode128.setCodeType(Barcode.CODE128);
                             Image code128Image = barcode128.createImageWithBarcode(cb, null, null);
                             doc.add(code128Image);
         
        doc.add(myTable);

        doc.close();

    }
}
catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "ERROR EN A:" + ex.getMessage());
                    }
                } catch (NumberFormatException | SQLException | HeadlessException ex) {
                    JOptionPane.showMessageDialog(null, "ERROR EN B:" + ex.getMessage());
                }
                try {
                    // create the java mysql update preparedstatement
                    String query = "update abastecimiento set estado = 'Nota de compra ingresada con productos faltantes' where numerocotizacion = ?";
                    PreparedStatement preparedStmt = cn.prepareStatement(query);
                    preparedStmt.setString(1, lblNC.getText());
                    // execute the java preparedstatement
                    preparedStmt.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Cotización validada: " + txtNC.getText());
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Ha ocurrido un error: " + ex.getMessage());
                }

                int index_borrar = tblProductosEnNC.getRowCount();
                DefaultTableModel modelo_paso = (DefaultTableModel) tblProductosEnNC.getModel();
                for (int i = index_borrar - 1; i >= 0; i--) {
                    modelo_paso.removeRow(i);
                }

                txtNC.setText("");
                txtIDproductoIngreso.setText("");
                txtSKUIngreso.setText("");
                txtNombreProductoIngreso.setText("");
                txtStockIngresado.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "Operación cancelada");
            }
        } else if (totalCantidadNV == 0) {
            //se estará ingresando con la cantidad justa

            String[] options = new String[]{"Confirmar", "Cancelar"};

            int resp = JOptionPane.showOptionDialog(null, "Se está realizando el ingreso de mercadería con todos los productos", null,
                    JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,
                    null, options, options[0]);

            if (resp == 0) {
                //En caso de confirmar...
                try {
                    int idBodega = 0;
                    String query = "select * from bodega where nombreBodega = ?";
                    PreparedStatement pst3 = cn.prepareStatement(query);
                    pst3.setString(1, cmbBodega.getSelectedItem().toString());
                    ResultSet rs3 = pst3.executeQuery();
                    while (rs3.next()) {
                        idBodega = rs3.getInt("idBodega");
                    }

                    try {
                        DefaultTableModel model = (DefaultTableModel) tblProductosEnNC.getModel();
                        int rowcount = tblProductosEnNC.getRowCount();
                        for (int i = 0; i < rowcount; i++) {
                            String query3 = "INSERT INTO ingreso(`numeroCotizacion`,`notaventa`, `nombreDistribuidor`,numeroFactura,guiaDespachoProveedor, "
                                    + "`tipoTransporte`, `idBodega`,`IDProducto`,`SKU`,"
                                    + "`codigoGeneradoQR`,`StockIngresado`,`tipoIngreso`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
                            PreparedStatement pst2 = cn.prepareStatement(query3);
                            pst2.setString(1, lblNC.getText());
                            pst2.setString(2, txtNC.getText());
                            pst2.setString(3, txtDistribuidor.getText());
                            pst2.setString(4, txtNumFactura.getText());
                            pst2.setString(5, txtGuiaDespacho.getText());
                            pst2.setString(6, cmbTransporte.getSelectedItem().toString());
                            pst2.setInt(7, cmbBodega.getSelectedIndex());
                            pst2.setString(8, model.getValueAt(i, 0).toString());
                            pst2.setString(9, model.getValueAt(i, 1).toString());
                            pst2.setString(10, "");
                            pst2.setString(11, model.getValueAt(i, 3).toString());
                            pst2.setString(12, "Ingreso realizado por 'Ingreso de Mercadería'");
                            int up = pst2.executeUpdate();
                            String queryINV = "UPDATE INVENTARIO SET STOCK = stock + ? WHERE IDPRODUCTO = ?";
                            PreparedStatement pstINV = cn.prepareStatement(queryINV);
                            pstINV.setInt(1, Integer.parseInt(tblProductosEnNC.getValueAt(i, 3).toString()));
                            pstINV.setString(2, tblProductosEnNC.getValueAt(i, 0).toString());
                            int upINV = pstINV.executeUpdate();

                            String queryIngreso = "SELECT MAX(idIngreso),stockIngresado FROM ingreso having MAX(idIngreso)";
                            // create the java statement
                            PreparedStatement pstIngreso = cn.prepareStatement(queryIngreso);
                            // execute the query, and get a java resultset
                            ResultSet rs = pstIngreso.executeQuery();
                            // iterate through the java resultset
                            int maxId = 0;

                            int cantidad = 0;

                            while (rs.next()) {
                                maxId = rs.getInt(1);

                                cantidad = rs.getInt(2);
                            }

                            String ruta = "";

                            JFileChooser dlg = new JFileChooser();
                            dlg.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                            int option = dlg.showOpenDialog(this);

                            if (option == JFileChooser.APPROVE_OPTION) {
                                File f = dlg.getSelectedFile();
                                ruta = f.toString();
                            }

                            Date sistHora = new Date();
                            String pmAm = "hh:mm a";
                            SimpleDateFormat format = new SimpleDateFormat(pmAm);
                            Calendar hoy = Calendar.getInstance();
                            String hora = (String.format(format.format(sistHora), hoy));
                            hora = hora.replace(":", "-");
                            SimpleDateFormat formato = new SimpleDateFormat("dd-MMM-YYYY");
                            Date sistFecha = new Date();

                            Document doc = new Document(new Rectangle(282, 424));

                            PdfWriter writer = PdfWriter.getInstance(doc, new FileOutputStream(ruta + "\\" + "ingreso_numero_" + txtNC.getText() + "_producto_" + model.getValueAt(i, 1).toString() + "_fecha_" + formato.format(sistFecha) + ".pdf"));

                            doc.open();

                            //Establecer imagen y escala
                            com.itextpdf.text.Image logoAcima = com.itextpdf.text.Image.getInstance("src\\imagenes\\acima-logo-400p.png");
                            logoAcima.scaleAbsolute(64, 34);

                            PdfPCell cell1 = new PdfPCell(logoAcima, false);
                            cell1.setBorder(Rectangle.NO_BORDER);
                            cell1.setBackgroundColor(BaseColor.WHITE);
                            cell1.setHorizontalAlignment(Element.ALIGN_RIGHT);

                            //Crear Tabla
                            PdfPTable tableHeader = new PdfPTable(1);
                            tableHeader.setWidthPercentage(100);

                            tableHeader.addCell(cell1);
                            doc.add(tableHeader);

                            //Separador
                            PdfPTable myTable = new PdfPTable(1);
                            myTable.setWidthPercentage(100.0f);
                            PdfPCell myCell = new PdfPCell(new Paragraph(""));
                            myCell.setBorder(Rectangle.BOTTOM);
                            myTable.addCell(myCell);
                            myTable.setSpacingAfter(5f);
                            myTable.setSpacingBefore(5f);
                            doc.add(myTable);

                            //Crear Tabla de información
                            PdfPTable tableInfoContacto = new PdfPTable(1);
                            tableInfoContacto.setWidthPercentage(100);

                            //Empresa
                            Paragraph empresaNegrita = new Paragraph("Empresa: ", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.BOLD, null));
                            Paragraph empresaLabel = new Paragraph(lblEmpresa.getText(), FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));

                            //Orden de Compra
                            Paragraph oc = new Paragraph("Orden de Compra: " + lblOC.getText(), FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                            oc.setAlignment(Paragraph.ALIGN_LEFT);
                            doc.add(oc);
                            //Ingreso
                            Paragraph fechaIngreso = new Paragraph("Fecha de Ingreso de Mercadería: " + formato.format(sistFecha), FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                            fechaIngreso.setAlignment(Paragraph.ALIGN_LEFT);
                            doc.add(fechaIngreso);

                            doc.add(myTable);

                            //Nombre Producto
                            Paragraph nombreProducto = new Paragraph("Nombre de Producto: " + model.getValueAt(i, 2).toString(), FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                            nombreProducto.setAlignment(Paragraph.ALIGN_LEFT);
                            doc.add(nombreProducto);
                            //Sku
                            Paragraph sku = new Paragraph("SKU: " + model.getValueAt(i, 1).toString(), FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                            sku.setAlignment(Paragraph.ALIGN_LEFT);
                            doc.add(sku);

                            doc.add(myTable);

                            //Numero de Ingreso
                            Paragraph numeroIngreso = new Paragraph("Número de Ingreso: " + maxId, FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                            numeroIngreso.setAlignment(Paragraph.ALIGN_LEFT);
                            doc.add(numeroIngreso);

                            ///Codigo QR
                            BarcodeQRCode barcodeQRCode = new BarcodeQRCode("Acima Group - " + maxId, 1000, 1000, null);
                            com.itextpdf.text.Image codeQrImage = barcodeQRCode.getImage();
                            codeQrImage.scaleAbsolute(60, 60);

                            doc.add(codeQrImage);


                            
                             PdfContentByte cb = writer.getDirectContent();
                             Barcode128 barcode128 = new Barcode128();
                             barcode128.setCode("este es un codigo de barra muy largo...con mucha informacion innecesaria");
                             barcode128.setCodeType(Barcode.CODE128);
                             Image code128Image = barcode128.createImageWithBarcode(cb, null, null);
                             doc.add(code128Image);
                             
                            doc.add(myTable);

                            doc.close();

                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "ERROR EN A:" + ex.getMessage());
                    }
                } catch (NumberFormatException | SQLException | HeadlessException ex) {
                    JOptionPane.showMessageDialog(null, "ERROR EN B:" + ex.getMessage());
                }
                try {
                    // create the java mysql update preparedstatement
                    String query = "update abastecimiento set estado = 'Nota de compra ingresada' where numerocotizacion = ?";
                    PreparedStatement preparedStmt = cn.prepareStatement(query);
                    preparedStmt.setString(1, lblNC.getText());
                    // execute the java preparedstatement
                    preparedStmt.executeUpdate();
                    JOptionPane.showMessageDialog(null, "Cotización validada: " + txtNC.getText());
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Ha ocurrido un error: " + ex.getMessage());
                }

                int index_borrar = tblProductosEnNC.getRowCount();
                DefaultTableModel modelo_paso = (DefaultTableModel) tblProductosEnNC.getModel();
                for (int i = index_borrar - 1; i >= 0; i--) {
                    modelo_paso.removeRow(i);
                }

                txtNC.setText("");
                txtIDproductoIngreso.setText("");
                txtSKUIngreso.setText("");
                txtNombreProductoIngreso.setText("");
                txtStockIngresado.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "Operación cancelada");
            }


        }
         */

    }//GEN-LAST:event_btnIngresarMercaderíaActionPerformed

    private void txtNCKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNCKeyPressed

    }//GEN-LAST:event_txtNCKeyPressed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {

            String queryProveedor = "SELECT proveedor FROM abastecimiento\n"
                    + "WHERE numeroCotizacion = ?";
            String paramProveedor = txtNC.getText();
            PreparedStatement pstProveedor = cn.prepareStatement(queryProveedor);
            pstProveedor.setString(1, paramProveedor);
            ResultSet rsProveedor = pstProveedor.executeQuery();
            while (rsProveedor.next()) {
                txtDistribuidor.setText(rsProveedor.getString(1));
            }

            String query = "SELECT \n"
                    + "    da.codigoOrdenCompra AS 'CÓDIGO DE ORDEN DE COMPRA',\n"
                    + "    da.SKU AS 'SKU de Proveedor',\n"
                    + "    da.CODIGOPRODUCTO AS 'CODIGO DE PRODUCTO',\n"
                    + "    da.CATEGORIA AS 'CATEGORÍA',\n"
                    + "    da.NOMBRE AS 'NOMBRE DE PRODUCTO',\n"
                    + "    da.CANTIDAD AS 'CANTIDAD',\n"
                    + "    0 AS 'Cantidad Pendiente',\n"
                    + "    da.PRECIOUNITARIO AS 'PRECIOUNITARIO',\n"
                    + "    da.PRECIOTOTALNETO AS 'PRECIO TOTAL NETO',\n"
                    + "    da.estado AS 'Estado'\n"
                    + "FROM\n"
                    + "    detalle_abastecimiento da\n"
                    + "WHERE\n"
                    + "    da.numeroCotizacion = ?;";
            String param = txtNC.getText();
            PreparedStatement pst = cn.prepareStatement(query);
            pst.setString(1, param);

            ResultSet rs = pst.executeQuery();
            tblProductosAIngresar.setModel(DbUtils.resultSetToTableModel(rs));

            //Sacar la cantidad pendiente que puedan tener
            for (int i = 0; i < tblProductosAIngresar.getRowCount(); i++) {
                int cantidadSolicitada = 0;
                DefaultTableModel modeloIngresos = (DefaultTableModel) tblProductosAIngresar.getModel();
                String queryCorregirCantidad = "select sum(stockIngresado) from ingreso where notaVenta = ? and idProducto = ? and codigoOrdenCompra = ?;";
                PreparedStatement pstCorregir = cn.prepareStatement(queryCorregirCantidad);
                pstCorregir.setString(1, txtNC.getText());
                pstCorregir.setString(2, tblProductosAIngresar.getValueAt(i, 2).toString());
                pstCorregir.setString(3, tblProductosAIngresar.getValueAt(i, 0).toString());
                ResultSet rsCorregir = pstCorregir.executeQuery();

                while (rsCorregir.next()) {
                    cantidadSolicitada = rsCorregir.getInt("sum(stockIngresado)");
                }
                modeloIngresos.setValueAt(Integer.parseInt(modeloIngresos.getValueAt(i, 5).toString()) - cantidadSolicitada, i, 6);
            }

            while (rs.next()) {
                txtIDproductoIngreso.setText("");
                txtSKUIngreso.setText(rs.getString(""));
                txtNombreProductoIngreso.setText(rs.getString("Nombredelproducto"));
                txtStockIngresado.setText(rs.getString("cantidadProducto"));
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error:" + ex.getMessage());
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void tblProductosAIngresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProductosAIngresarMouseClicked
        try {
            panelIngresoProducto.setVisible(true);
            DefaultTableModel model = (DefaultTableModel) tblProductosAIngresar.getModel();
            int selectedRow = tblProductosAIngresar.getSelectedRow();
            String query = "Select * FROM inventario where idProducto = ?";
            String param = model.getValueAt(selectedRow, 2).toString();
            PreparedStatement pst = cn.prepareStatement(query);
            pst.setString(1, param);
            ResultSet rs = pst.executeQuery();
            while (rs.next()) {
                txtIDproductoIngreso.setText(rs.getString("IDPRODUCTO"));
                txtSKUIngreso.setText(rs.getString("SKU"));
                txtNombreProductoIngreso.setText(rs.getString("Nombreproducto"));
                txtStockIngresado.setText("");
            }
            JOptionPane.showMessageDialog(null, "Ingrese la información del producto a ingresar en el formulario de abajo:");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error: " + ex.getMessage());
        }
    }//GEN-LAST:event_tblProductosAIngresarMouseClicked

    private void tblProductosAIngresarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblProductosAIngresarKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tblProductosAIngresarKeyPressed

    private void btnVolver5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolver5ActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnVolver5ActionPerformed

    private void txtDistribuidorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDistribuidorKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDistribuidorKeyPressed

    private void txtDistribuidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDistribuidorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDistribuidorActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel) tblProductosEnNC.getModel();
            int SelectedRowIndex = tblProductosEnNC.getSelectedRow();

            int indexTablaOriginal = tblProductosAIngresar.getSelectedRow();
            int cantidadTablaOriginal = Integer.parseInt(tblProductosAIngresar.getValueAt(indexTablaOriginal, 4).toString());

            int cantidadBorrada = Integer.parseInt(model.getValueAt(SelectedRowIndex, 3).toString());

            cantidadBorrada = cantidadBorrada + cantidadTablaOriginal;
            tblProductosAIngresar.setValueAt(cantidadBorrada, indexTablaOriginal, 4);

            model.removeRow(SelectedRowIndex);
            JOptionPane.showMessageDialog(null, "Producto Removido");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un producto " + ex);
        }
    }//GEN-LAST:event_btnBorrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ingreso.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ingreso.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ingreso.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ingreso.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ingreso().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnConfirmarInfoProd;
    private javax.swing.JButton btnIngresarMercadería;
    private javax.swing.JButton btnVolver5;
    public javax.swing.JComboBox<String> cmbBodega;
    public javax.swing.JComboBox cmbSeccionBodega;
    public javax.swing.JComboBox<String> cmbTransporte;
    public javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane5;
    public javax.swing.JLabel lblEmpresa;
    public javax.swing.JLabel lblNC;
    public javax.swing.JLabel lblOC;
    private javax.swing.JPanel panelIngresoProducto;
    private javax.swing.JTable tblProductosAIngresar;
    private javax.swing.JTable tblProductosEnNC;
    public javax.swing.JTextField txtDistribuidor;
    private javax.swing.JTextField txtGuiaDespacho;
    private javax.swing.JTextField txtIDproductoIngreso;
    public javax.swing.JTextField txtNC;
    private javax.swing.JTextField txtNombreProductoIngreso;
    private javax.swing.JTextField txtNumFactura;
    private javax.swing.JTextField txtSKUIngreso;
    private javax.swing.JTextField txtStockIngresado;
    // End of variables declaration//GEN-END:variables
}
