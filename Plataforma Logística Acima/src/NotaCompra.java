
import clases.Conexion;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author The_S
 */
public class NotaCompra extends javax.swing.JFrame {

    Conexion con = new Conexion();
    Connection cn = con.conecta();

    public NotaCompra() {
        initComponents();
        TableColorCellRenderer renderer = new TableColorCellRenderer();
        tblNC.setDefaultRenderer(Object.class, renderer);
        this.repaint();
    }

    public class TableColorCellRenderer implements TableCellRenderer {

        private final TableCellRenderer RENDERER = new DefaultTableCellRenderer();

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component c = RENDERER.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            int index = tblNC.getSelectedRow();
            if (row == index) {
                c.setBackground(new Color(57, 105, 138));
                c.setForeground(Color.WHITE);
            } else if (row % 2 == 0) {
                c.setBackground(Color.WHITE);
                c.setForeground(Color.BLACK);
                if (column != 7) {
                    c.setBackground(Color.WHITE);
                    c.setForeground(Color.BLACK);

                }
                if (column == 7) {
                    if (tblNC.getValueAt(row, 7).toString().equals("Comprado") || tblNC.getValueAt(row, 7).toString().equals("Enviado a Proveedor")) {
                        c.setBackground(Color.green);
                        c.setForeground(Color.BLACK);
                    }
                    if (tblNC.getValueAt(row, 7).toString().equals("Nota de compra ingresada con productos faltantes")) {
                        c.setBackground(Color.YELLOW);
                        c.setForeground(Color.BLACK);
                    }
                }
            } else {
                c.setBackground(new Color(242, 242, 242));
                c.setForeground(Color.BLACK);
                if (column != 7) {
                    c.setBackground(Color.WHITE);
                    c.setForeground(Color.BLACK);

                }
                if (column == 7) {
                    if (tblNC.getValueAt(row, 7).toString().equals("Comprado") || tblNC.getValueAt(row, 7).toString().equals("Enviado a Proveedor")) {
                        c.setBackground(Color.green);
                        c.setForeground(Color.BLACK);
                    }
                    if (tblNC.getValueAt(row, 7).toString().equals("Nota de compra ingresada con productos faltantes")) {
                        c.setBackground(Color.YELLOW);
                        c.setForeground(Color.BLACK);
                    }
                }
            }

            return c;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel11 = new javax.swing.JPanel();
        btnSalir3 = new javax.swing.JButton();
        jScrollPane15 = new javax.swing.JScrollPane();
        tblNC = new javax.swing.JTable();
        btnReiniciarFiltros = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductosDesechable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        rdbAntiguoNuevo = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        cmbDistribuidor = new javax.swing.JComboBox();
        jPanel7 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        txtCodigoOrdenCompra = new javax.swing.JTextField();
        btnBuscarOC = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNumNV = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtCotizacion = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel11.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnSalir3.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnSalir3.setText("Volver");
        btnSalir3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalir3ActionPerformed(evt);
            }
        });

        tblNC = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int celIndex){
                return false;
            }
        };
        tblNC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblNC.getTableHeader().setReorderingAllowed(false);
        tblNC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNCMouseClicked(evt);
            }
        });
        jScrollPane15.setViewportView(tblNC);

        btnReiniciarFiltros.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnReiniciarFiltros.setText("Reiniciar Filtros");
        btnReiniciarFiltros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReiniciarFiltrosActionPerformed(evt);
            }
        });

        jScrollPane1.setVisible(false);

        tblProductosDesechable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblProductosDesechable);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Ordenar por:");

        buttonGroup2.add(rdbAntiguoNuevo);
        rdbAntiguoNuevo.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        rdbAntiguoNuevo.setText("Fecha Antiguo - Nuevo");
        rdbAntiguoNuevo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rdbAntiguoNuevoItemStateChanged(evt);
            }
        });

        buttonGroup2.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jRadioButton2.setText("Fecha Nuevo - Antiguo");
        jRadioButton2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton2ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdbAntiguoNuevo)
                    .addComponent(jRadioButton2))
                .addGap(6, 6, 6))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSalir3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnReiniciarFiltros, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE))
                .addGap(10, 10, 10))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(993, 993, 993)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(993, 993, 993)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(btnReiniciarFiltros)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSalir3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rdbAntiguoNuevo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 563, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        cmbDistribuidor.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        cmbDistribuidor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDistribuidorItemStateChanged(evt);
            }
        });
        cmbDistribuidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDistribuidorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbDistribuidor, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(645, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbDistribuidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Buscar por ACIMA GLOBAL / ACIMA SOLUCIONES / Vive Más", jPanel3);

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel27.setText("Código de Orden de Compra:");

        txtCodigoOrdenCompra.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N

        btnBuscarOC.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnBuscarOC.setText("Buscar");
        btnBuscarOC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarOCActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCodigoOrdenCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBuscarOC)
                .addContainerGap(343, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(txtCodigoOrdenCompra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarOC))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Buscar por Código de Orden de Compra", jPanel7);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setText("N° de nota de venta:");

        txtNumNV.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jButton2.setText("Buscar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNumNV, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(543, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNumNV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Buscar por N° de nota de venta", jPanel1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel3.setText("N° de Cotización:");

        txtCotizacion.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jButton4.setText("Buscar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCotizacion, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap(507, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtCotizacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Buscar por N° de Cotización", jPanel2);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/acima-logo-200p.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalir3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalir3ActionPerformed
        this.dispose();

    }//GEN-LAST:event_btnSalir3ActionPerformed

    private void btnReiniciarFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReiniciarFiltrosActionPerformed
        try {
            String queryActualizar = "SELECT \n"
                    + "    a.numeroCotizacion AS 'OC de Proveedor',\n"
                    + "    da.idOrden AS 'N° de nota de venta',\n"
                    + "    a.codigoOrdenCompra AS 'Código de Orden de Compra',\n"
                    + "    a.distribuidor AS 'Distribuidor',\n"
                    + "    CONCAT(SUBSTRING(a.fecha, 9, 2),\n"
                    + "            '-',\n"
                    + "            SUBSTRING(a.fecha, 6, 2),\n"
                    + "            '-',\n"
                    + "            SUBSTRING(a.fecha, 1, 4)) AS 'Fecha de cotización',\n"
                    + "    SUBSTRING(a.demoradespacho, 1, 2) AS 'Días Hábiles para arribo de mercadería',\n"
                    + "    a.proveedor AS 'Proveedor',\n"
                    + "    a.estado AS 'Estado'\n"
                    + "FROM\n"
                    + "    abastecimiento a\n"
                    + "        LEFT JOIN\n"
                    + "    detalle_abastecimiento da ON a.codigoOrdenCompra = da.codigoOrdenCompra\n"
                    + "WHERE\n"
                    + "    a.estado IN ('Comprado' , 'Nota de compra ingresada con productos faltantes',\n"
                    + "        'Enviado a Proveedor')\n"
                    + "GROUP BY a.numeroCotizacion;";
            PreparedStatement pst = cn.prepareStatement(queryActualizar);
            ResultSet rs = pst.executeQuery();
            tblNC.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_btnReiniciarFiltrosActionPerformed

    private void cmbDistribuidorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDistribuidorItemStateChanged
        try {
            String query = "SELECT \n"
                    + "    a.numeroCotizacion AS 'OC de Proveedor',\n"
                    + "    da.idOrden AS 'N° de nota de venta',\n"
                    + "    a.codigoOrdenCompra AS 'Código de Orden de Compra',\n"
                    + "    a.distribuidor AS 'Distribuidor',\n"
                    + "    CONCAT(SUBSTRING(a.fecha, 9, 2),\n"
                    + "            '-',\n"
                    + "            SUBSTRING(a.fecha, 6, 2),\n"
                    + "            '-',\n"
                    + "            SUBSTRING(a.fecha, 1, 4)) AS 'Fecha de cotización',\n"
                    + "    SUBSTRING(a.demoradespacho, 1, 2) AS 'Días Hábiles para arribo de mercadería',\n"
                    + "    a.proveedor AS 'Proveedor',\n"
                    + "    a.estado AS 'Estado'\n"
                    + "FROM\n"
                    + "    abastecimiento a\n"
                    + "        LEFT JOIN\n"
                    + "    detalle_abastecimiento da ON a.codigoOrdenCompra = da.codigoOrdenCompra\n"
                    + "WHERE\n"
                    + "    a.estado IN ('Comprado' , 'Nota de compra ingresada con productos faltantes',\n"
                    + "        'Enviado a Proveedor') and a.distribuidor RLIKE ?\n"
                    + "GROUP BY a.numeroCotizacion;";
            PreparedStatement pst;
            pst = cn.prepareStatement(query);
            pst.setString(1, cmbDistribuidor.getSelectedItem().toString());
            ResultSet rs = pst.executeQuery();
            tblNC.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            Logger.getLogger(Seguimiento.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbDistribuidorItemStateChanged

    private void btnBuscarOCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarOCActionPerformed
        try {
            String query = "SELECT \n"
                    + "    a.numeroCotizacion AS 'OC de Proveedor',\n"
                    + "    da.idOrden AS 'N° de nota de venta',\n"
                    + "    a.codigoOrdenCompra AS 'Código de Orden de Compra',\n"
                    + "    a.distribuidor AS 'Distribuidor',\n"
                    + "    CONCAT(SUBSTRING(a.fecha, 9, 2),\n"
                    + "            '-',\n"
                    + "            SUBSTRING(a.fecha, 6, 2),\n"
                    + "            '-',\n"
                    + "            SUBSTRING(a.fecha, 1, 4)) AS 'Fecha de cotización',\n"
                    + "    SUBSTRING(a.demoradespacho, 1, 2) AS 'Días Hábiles',\n"
                    + "    a.proveedor AS 'Proveedor',\n"
                    + "    a.estado AS 'Estado'\n"
                    + "FROM\n"
                    + "    abastecimiento a\n"
                    + "        LEFT JOIN\n"
                    + "    detalle_abastecimiento da ON a.codigoOrdenCompra = da.codigoOrdenCompra\n"
                    + "WHERE\n"
                    + "    a.estado IN ('Comprado' , 'Nota de compra ingresada con productos faltantes',\n"
                    + "        'Enviado a Proveedor') and a.codigoOrdenCompra RLIKE ?\n"
                    + "GROUP BY a.numeroCotizacion;";
            PreparedStatement pst;
            pst = cn.prepareStatement(query);
            pst.setString(1, txtCodigoOrdenCompra.getText());
            ResultSet rs = pst.executeQuery();
            tblNC.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            Logger.getLogger(Seguimiento.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBuscarOCActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            String query = "SELECT \n"
                    + "    a.numeroCotizacion AS 'OC de Proveedor',\n"
                    + "    da.idOrden AS 'N° de nota de venta',\n"
                    + "    a.codigoOrdenCompra AS 'Código de Orden de Compra',\n"
                    + "    a.distribuidor AS 'Distribuidor',\n"
                    + "    CONCAT(SUBSTRING(a.fecha, 9, 2),\n"
                    + "            '-',\n"
                    + "            SUBSTRING(a.fecha, 6, 2),\n"
                    + "            '-',\n"
                    + "            SUBSTRING(a.fecha, 1, 4)) AS 'Fecha de cotización',\n"
                    + "    SUBSTRING(a.demoradespacho, 1, 2) AS 'Días Hábiles',\n"
                    + "    a.proveedor AS 'Proveedor',\n"
                    + "    a.estado AS 'Estado'\n"
                    + "FROM\n"
                    + "    abastecimiento a\n"
                    + "        LEFT JOIN\n"
                    + "    detalle_abastecimiento da ON a.codigoOrdenCompra = da.codigoOrdenCompra\n"
                    + "WHERE\n"
                    + "    a.estado IN ('Comprado' , 'Nota de compra ingresada con productos faltantes',\n"
                    + "        'Enviado a Proveedor') and da.idOrden RLIKE ? \n"
                    + "GROUP BY a.numeroCotizacion;\n";
            PreparedStatement pst;
            pst = cn.prepareStatement(query);
            pst.setInt(1, Integer.parseInt(txtNumNV.getText()));
            ResultSet rs = pst.executeQuery();
            tblNC.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            Logger.getLogger(Seguimiento.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tblNCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNCMouseClicked
        //Para cambiar el estado de una nota de venta
        TableColorCellRenderer renderer = new TableColorCellRenderer();
        tblNC.setDefaultRenderer(Object.class, renderer);
        this.repaint();

        int index = tblNC.getSelectedRow();
        String[] options1 = new String[]{"Ingresar Mercadería", "Imprimir Documentos de Nota de Compra"};
        int resp1 = JOptionPane.showOptionDialog(null, "Elija una operación", null,
                JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,
                null, options1, options1[0]);
        if (resp1 == 0) {
            try {
                Ingreso ingreso = new Ingreso();
                String query = "select nombreBodega,seccion from bodega";
                PreparedStatement pst = cn.prepareStatement(query);
                ResultSet rs = pst.executeQuery();
                while (rs.next()) {
                    ingreso.cmbBodega.addItem(rs.getString(1));
                    ingreso.cmbSeccionBodega.addItem(rs.getString(2));
                }
                int index2 = tblNC.getSelectedRow();
                //seleccionarComuna(jComboBox1, jComboBox1);
                ingreso.txtNC.setText(tblNC.getValueAt(index2, 0).toString());
                ingreso.lblNC.setText(tblNC.getValueAt(index2, 1).toString());
                ingreso.lblEmpresa.setText(tblNC.getValueAt(index2, 3).toString());
                ingreso.lblOC.setText(tblNC.getValueAt(index2, 2).toString());
                ingreso.setVisible(true);
                ingreso.jButton6.doClick();
                ingreso.ajusteTablaProductosNotaCompra();
                this.dispose();

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Ha ocurrido un error " + ex);
            }

        } else if (resp1 == 1) {

            try {

                int index_tabla_nc = tblNC.getSelectedRow();
                String notaCompra = tblNC.getValueAt(index_tabla_nc, 0).toString();
                String proveedor = tblNC.getValueAt(index_tabla_nc, 3).toString();

                //Fecha
                java.util.Date sistFecha = new java.util.Date();
                SimpleDateFormat formato = new SimpleDateFormat("dd-MMM-YYYY");
                //PDF
                String ruta = "";

                JFileChooser dlg = new JFileChooser();
                dlg.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

                int option = dlg.showOpenDialog(this);

                if (option == JFileChooser.APPROVE_OPTION) {
                    File f = dlg.getSelectedFile();
                    ruta = f.toString();
                }

                try {

                    double neto = 0;
                    double iva = 0;
                    double total_abastecimiento = 0;
                    String demoraDespacho = "";
                    String formaPago = "";
                    String fecha = "";

                    try {
                        String query = "SELECT \n"
                                + "   SUM( precioCosto * cantidad )\n"
                                + "FROM\n"
                                + "    detalle_abastecimiento\n"
                                + "WHERE\n"
                                + "    numeroCotizacion = ?;";
                        PreparedStatement pst = cn.prepareStatement(query);
                        pst.setString(1, notaCompra);
                        ResultSet rs = pst.executeQuery();
                        while (rs.next()) {
                            neto = rs.getInt(1);
                        }

                    } catch (Exception ex) {
                        System.out.println("Error: " + ex);
                    }

                    /*
                            fecha = rs.getString("a.fecha");
                                    demoraDespacho = rs.getString("a.demoraDespacho");
                                    formaPago = rs.getString("a.FormaPago");
                     */
                    try {
                        String query = "select fecha,demoraDespacho,FormaPago FROM abastecimiento WHERE numeroCotizacion = ? group by numeroCotizacion;";
                        PreparedStatement pst = cn.prepareStatement(query);
                        pst.setString(1, notaCompra);
                        ResultSet rs = pst.executeQuery();
                        while (rs.next()) {
                            fecha = rs.getString("fecha");
                            demoraDespacho = rs.getString("demoraDespacho");
                            formaPago = rs.getString("FormaPago");
                        }

                    } catch (Exception ex) {
                        System.out.println("Error: " + ex);
                    }
                    System.out.println("Fecha:" + fecha);

                    String anio = Character.toString(fecha.charAt(0)) + Character.toString(fecha.charAt(1)) + Character.toString(fecha.charAt(2)) + Character.toString(fecha.charAt(3));
                    String mes = Character.toString(fecha.charAt(5)) + Character.toString(fecha.charAt(6));
                    String dia = Character.toString(fecha.charAt(8)) + Character.toString(fecha.charAt(9));

                    fecha = dia + "-" + mes + "-" + anio;

                    Document doc = new Document(PageSize.A4);
                    try {
                        java.util.Date sistHora = new java.util.Date();
                        String pmAm = "hh:mm a";
                        SimpleDateFormat format = new SimpleDateFormat(pmAm);
                        Calendar hoy = Calendar.getInstance();
                        String hora = (String.format(format.format(sistHora), hoy));
                        hora = hora.replace(":", "-");
                        PdfWriter writer = PdfWriter.getInstance(doc, new FileOutputStream(ruta + "\\" + "Nota_de_Compra_" + notaCompra + "_Fecha_" + fecha + "_hora_" + hora + ".pdf"));

                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(NotaCompra.class
                                .getName()).log(Level.SEVERE, null, ex);
                    }
                    doc.open();
                    //Añadir la imagen
                    try {
                        //Establecer imagen y escala
                        Image logoAcima = Image.getInstance("src\\Imagenes\\acima-logo-400p.png");
                        logoAcima.scaleAbsolute(128, 68);
                        //Establecer párrafo
                        Paragraph nro = new Paragraph(tblNC.getValueAt(index_tabla_nc, 1).toString() + "\n"
                                + "76.473.504-8 \n"
                                + "AV. 5 de abril 4454, Oficina 31, Estación Central - Santiago de Chile \n"
                                + "Venta de articulos al por menor \n"
                                + "Fono: 232107900 \n"
                                + "www.acima.cl", FontFactory
                                        .getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null)
                        );
                        nro.setAlignment(Paragraph.ALIGN_JUSTIFIED);

                        //Crear Tabla
                        PdfPTable tableHeader = new PdfPTable(2);
                        tableHeader.setWidthPercentage(100);

                        PdfPCell cell1 = new PdfPCell(logoAcima, false);
                        cell1.setBorder(Rectangle.NO_BORDER);
                        cell1.setBackgroundColor(BaseColor.WHITE);
                        cell1.setHorizontalAlignment(Element.ALIGN_RIGHT);

                        PdfPCell cell2 = new PdfPCell(nro);
                        cell2.setBorder(Rectangle.NO_BORDER);
                        cell2.setBackgroundColor(BaseColor.WHITE);
                        cell2.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);

                        tableHeader.addCell(cell2);
                        tableHeader.addCell(cell1);
                        doc.add(tableHeader);
                        Paragraph numeroNV = new Paragraph("N° de Orden de Compra: " + notaCompra, FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, null));
                        numeroNV.setAlignment(Paragraph.ALIGN_RIGHT);
                        doc.add(numeroNV);
                        Paragraph fechaEmision = new Paragraph("Fecha: " + fecha, FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, null));
                        fechaEmision.setAlignment(Paragraph.ALIGN_RIGHT);
                        doc.add(fechaEmision);

                    } catch (BadElementException | IOException ex) {
                        Logger.getLogger(NotaCompra.class
                                .getName()).log(Level.SEVERE, null, ex);

                    }

                    //Query
                    String rut = "";
                    String nombreProveedor = "";
                    String direccionProveedor = "";
                    String ciudadProveedor = "";
                    String giro = "";
                    String telefonoProveedor = "";

                    String atencion = "";

                    try {
                        String query = "select rut_proveedor,nombre_proveedor,direccion_proveedor,ciudad_proveedor,giro,telefono,contacto from proveedores where nombre_proveedor = ?;";
                        PreparedStatement pst = cn.prepareStatement(query);
                        pst.setString(1, proveedor);
                        ResultSet rs = pst.executeQuery();
                        while (rs.next()) {
                            if (rs.getString(1).isEmpty()) {
                                rut = "información no disponible";
                            } else {
                                rut = rs.getString(1);
                            }
                            if (rs.getString(2).isEmpty()) {
                                nombreProveedor = "información no disponible";
                            } else {
                                nombreProveedor = rs.getString(2);
                            }
                            if (rs.getString(3).isEmpty()) {
                                direccionProveedor = "información no disponible";
                            } else {
                                direccionProveedor = rs.getString(3);
                            }
                            if (rs.getString(4).isEmpty()) {
                                ciudadProveedor = "información no disponible";
                            } else {
                                ciudadProveedor = rs.getString(4);
                            }
                            if (rs.getString(5).isEmpty()) {
                                giro = "información no disponible";
                            } else {
                                giro = rs.getString(5);
                            }
                            if (rs.getString(6).isEmpty()) {
                                telefonoProveedor = "información no disponible";
                            } else {
                                telefonoProveedor = rs.getString(6);
                            }
                            if (rs.getString(7).isEmpty()) {
                                atencion = "información no disponible";
                            } else {
                                atencion = rs.getString(7);
                            }
                        }
                    } catch (Exception ex) {
                        System.out.println("Error en query: " + ex);
                    }

                    //Añadir la información
                    PdfPTable tableDatos = new PdfPTable(1);
                    tableDatos.setWidthPercentage(100);
                    PdfPCell cell1Proveedores = new PdfPCell(new Phrase("Proveedor", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
                    cell1Proveedores.setUseBorderPadding(true);
                    // Setting cell's background color
                    cell1Proveedores.setBackgroundColor(BaseColor.ORANGE);

                    tableDatos.addCell(cell1Proveedores);
                    tableDatos.addCell(new Phrase("Razón Social: " + proveedor, FontFactory.getFont(FontFactory.HELVETICA, 10)));
                    tableDatos.addCell(new Phrase("Rut: " + rut, FontFactory.getFont(FontFactory.HELVETICA, 10)));
                    tableDatos.addCell(new Phrase("Dirección: " + direccionProveedor, FontFactory.getFont(FontFactory.HELVETICA, 10)));
                    tableDatos.addCell(new Phrase("Ciudad: " + ciudadProveedor, FontFactory.getFont(FontFactory.HELVETICA, 10)));
                    tableDatos.addCell(new Phrase("Giro: " + giro, FontFactory.getFont(FontFactory.HELVETICA, 10)));
                    tableDatos.addCell(new Phrase("Telefono: " + telefonoProveedor, FontFactory.getFont(FontFactory.HELVETICA, 10)));
                    tableDatos.addCell(new Phrase("Atención a: " + atencion, FontFactory.getFont(FontFactory.HELVETICA, 10)));
                    tableDatos.setSpacingBefore(15f);
                    tableDatos.setWidthPercentage(100);
                    tableDatos.getDefaultCell().setBorder(Rectangle.NO_BORDER);

                    doc.add(tableDatos);

                    try {
                        String query = "SELECT \n"
                                + "    codigoOrdenCompra as 'Código de Orden de Compra',\n"
                                + "    sku as 'SKU',\n"
                                + "    nombre as 'Producto',\n"
                                + "    cantidad as 'Cantidad',\n"
                                + "    precioCosto AS 'Valor Unitario de Compra',\n"
                                + "    precioCosto * cantidad AS 'Total de costo de Compra',\n"
                                + "    precioTotalNeto AS 'Total de Nota de Venta',\n"
                                + "    margen\n"
                                + "FROM\n"
                                + "    detalle_abastecimiento\n"
                                + "    where numeroCotizacion = ?;";
                        PreparedStatement pst;
                        pst = cn.prepareStatement(query);
                        pst.setString(1, notaCompra);
                        ResultSet rs = pst.executeQuery();
                        tblProductosDesechable.setModel(DbUtils.resultSetToTableModel(rs));
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }

                    Paragraph tablas = new Paragraph("Resumen de Productos ", FontFactory.getFont(FontFactory.HELVETICA, 12, Font.NORMAL, null));
                    doc.add(tablas);
                    try {
                        PdfPTable pdfTable = new PdfPTable(5);
                        //Parámetros de espaciado y ancho
                        pdfTable.setSpacingBefore(15f);
                        pdfTable.setWidthPercentage(100);
                        //Añadir Valores

                        PdfPCell cell1 = new PdfPCell(new Phrase(tblProductosDesechable.getColumnName(1), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
                        cell1.setUseBorderPadding(true);
                        // Setting cell's background color
                        cell1.setBackgroundColor(BaseColor.ORANGE);

                        PdfPCell cell2 = new PdfPCell(new Phrase(tblProductosDesechable.getColumnName(2), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
                        cell2.setUseBorderPadding(true);
                        // Setting cell's background color
                        cell2.setBackgroundColor(BaseColor.ORANGE);

                        PdfPCell cell3 = new PdfPCell(new Phrase(tblProductosDesechable.getColumnName(3), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
                        cell3.setUseBorderPadding(true);
                        // Setting cell's background color
                        cell3.setBackgroundColor(BaseColor.ORANGE);

                        PdfPCell cell4 = new PdfPCell(new Phrase(tblProductosDesechable.getColumnName(4), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
                        cell4.setUseBorderPadding(true);
                        // Setting cell's background color
                        cell4.setBackgroundColor(BaseColor.ORANGE);

                        PdfPCell cell5 = new PdfPCell(new Phrase(tblProductosDesechable.getColumnName(5), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
                        cell5.setUseBorderPadding(true);
                        // Setting cell's background color
                        cell5.setBackgroundColor(BaseColor.ORANGE);

                        pdfTable.addCell(cell1);
                        pdfTable.addCell(cell2);
                        pdfTable.addCell(cell3);
                        pdfTable.addCell(cell4);
                        pdfTable.addCell(cell5);

                        //pdfTable.addCell(new Phrase(tblProductos.getColumnName(7), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
                        //pdfTable.addCell(new Phrase(tblProductos.getColumnName(10), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
                        //Extraer valores de la Jtable al PDF
                        try {
                            String queryProductosAgrupados = "SELECT\n"
                                    + "sku, nombre, SUM(CANTIDAD), precioCosto , (SUM(CANTIDAD)*precioCosto)\n"
                                    + "FROM\n"
                                    + "acimabasededatos.detalle_abastecimiento\n"
                                    + "where NUMEROCOTIZACION = ?\n"
                                    + "GROUP BY nombre;";
                            PreparedStatement pst2 = cn.prepareStatement(queryProductosAgrupados);

                            pst2.setString(1, notaCompra);
                            ResultSet rs2 = pst2.executeQuery();
                            tblProductosDesechable.setModel(DbUtils.resultSetToTableModel(rs2));
                        } catch (Exception ex) {
                            System.out.println("Error: " + ex);
                        }

                        for (int rows = 0; rows < tblProductosDesechable.getRowCount(); rows++) {
                            DecimalFormat formatea = new DecimalFormat("###,###.##");

                            double p = Double.parseDouble(tblProductosDesechable.getModel().getValueAt(rows, 3).toString());

                            double t = Double.parseDouble(tblProductosDesechable.getModel().getValueAt(rows, 4).toString());

                            //pdfTable.addCell(new Phrase(tblProductos.getModel().getValueAt(rows, 1).toString(), FontFactory.getFont(FontFactory.HELVETICA, 9)));
                            pdfTable.addCell(new Phrase(tblProductosDesechable.getModel().getValueAt(rows, 0).toString(), FontFactory.getFont(FontFactory.HELVETICA, 9)));
                            pdfTable.addCell(new Phrase(tblProductosDesechable.getModel().getValueAt(rows, 1).toString(), FontFactory.getFont(FontFactory.HELVETICA, 9)));
                            pdfTable.addCell(new Phrase(tblProductosDesechable.getModel().getValueAt(rows, 2).toString(), FontFactory.getFont(FontFactory.HELVETICA, 9)));
                            pdfTable.addCell(new Phrase("$" + formatea.format(p), FontFactory.getFont(FontFactory.HELVETICA, 9)));
                            pdfTable.addCell(new Phrase("$" + formatea.format(t), FontFactory.getFont(FontFactory.HELVETICA, 9)));

                            //pdfTable.addCell(new Phrase(tblProductos.getModel().getValueAt(rows, 7).toString(), FontFactory.getFont(FontFactory.HELVETICA, 9)));
                            //pdfTable.addCell(new Phrase(tblProductos.getModel().getValueAt(rows, 10).toString(), FontFactory.getFont(FontFactory.HELVETICA, 9)));
                        }
                        pdfTable.setWidths(new int[]{1, 1, 2, 1, 1});
                        doc.add(pdfTable);
                    } catch (DocumentException ex) {
                        JOptionPane.showMessageDialog(null, "Ha ocurrido un error: tabla" + ex.getMessage());
                    }
                    DecimalFormat formatea = new DecimalFormat("###,###.##");

                    iva = (neto * 0.19);
                    total_abastecimiento = neto + iva;

                    Paragraph neto_par = new Paragraph("Neto: " + "$" + formatea.format(neto), FontFactory.getFont(FontFactory.HELVETICA, 10, Font.NORMAL, null));
                    neto_par.setAlignment(Paragraph.ALIGN_RIGHT);
                    Paragraph iva_par = new Paragraph("IVA: " + "$" + formatea.format(iva), FontFactory.getFont(FontFactory.HELVETICA, 10, Font.NORMAL, null));
                    iva_par.setAlignment(Paragraph.ALIGN_RIGHT);
                    Paragraph total_par = new Paragraph("Total: " + "$" + formatea.format(total_abastecimiento), FontFactory.getFont(FontFactory.HELVETICA, 10, Font.NORMAL, null));
                    total_par.setAlignment(Paragraph.ALIGN_RIGHT);
                    doc.add(neto_par);
                    doc.add(iva_par);
                    doc.add(total_par);

                    //Nota
                    Paragraph nota = new Paragraph("Nota: Forma de Pago "
                            + formaPago, FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, null));
                    nota.setAlignment(Paragraph.ALIGN_JUSTIFIED);
                    doc.add(nota);

                    //Información de contacto
                    Paragraph telefono = new Paragraph("Para cualquier duda, favor contactar a:\n"
                            + "Ejecutivo Ronny Saa, Telefono +569 7288 8299 - Correo: abastecimiento@acima.cl", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                    telefono.setAlignment(Paragraph.ALIGN_JUSTIFIED);
                    doc.add(telefono);

                    //Firma
                    Image firma = Image.getInstance("src\\Imagenes\\firma_rony.png");
                    firma.setAlignment(Paragraph.ALIGN_CENTER);
                    doc.add(firma);

                    //Finalizar documento
                    doc.close();
                    JOptionPane.showMessageDialog(null, "PDF Generado Correctamente");

                } catch (DocumentException ex) {
                    JOptionPane.showMessageDialog(null, "Ha ocurrido un error: sss" + ex.getMessage());

                } catch (IOException ex) {
                    Logger.getLogger(NotaCompra.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

                //Orden de compra interna
                double neto = 0;
                double iva = 0;
                double total_abastecimiento = 0;
                String demoraDespacho = "";
                String formaPago = "";
                String fecha = "";

                try {
                    String query = "SELECT \n"
                            + "   SUM( precioCosto * cantidad )\n"
                            + "FROM\n"
                            + "    detalle_abastecimiento\n"
                            + "WHERE\n"
                            + "    numeroCotizacion = ?;";
                    PreparedStatement pst = cn.prepareStatement(query);
                    pst.setString(1, notaCompra);
                    ResultSet rs = pst.executeQuery();
                    while (rs.next()) {
                        neto = rs.getDouble(1);
                    }

                } catch (Exception ex) {
                    System.out.println("Error: " + ex);
                }

                /*
                            fecha = rs.getString("a.fecha");
                                    demoraDespacho = rs.getString("a.demoraDespacho");
                                    formaPago = rs.getString("a.FormaPago");
                 */
                try {
                    String query = "select fecha,demoraDespacho,FormaPago FROM abastecimiento WHERE numeroCotizacion = ? group by numeroCotizacion;";
                    PreparedStatement pst = cn.prepareStatement(query);
                    pst.setString(1, notaCompra);
                    ResultSet rs = pst.executeQuery();
                    while (rs.next()) {

                        fecha = rs.getString("fecha");
                        demoraDespacho = rs.getString("demoraDespacho");
                        formaPago = rs.getString("FormaPago");
                    }

                } catch (Exception ex) {
                    System.out.println("Error: " + ex);
                }

                String anio = Character.toString(fecha.charAt(0)) + Character.toString(fecha.charAt(1)) + Character.toString(fecha.charAt(2)) + Character.toString(fecha.charAt(3));
                String mes = Character.toString(fecha.charAt(5)) + Character.toString(fecha.charAt(6));
                String dia = Character.toString(fecha.charAt(8)) + Character.toString(fecha.charAt(9));

                fecha = dia + "-" + mes + "-" + anio;

                Document doc = new Document(PageSize.A4);
                try {
                    java.util.Date sistHora = new java.util.Date();
                    String pmAm = "hh:mm a";
                    SimpleDateFormat format = new SimpleDateFormat(pmAm);
                    Calendar hoy = Calendar.getInstance();
                    String hora = (String.format(format.format(sistHora), hoy));
                    hora = hora.replace(":", "-");
                    try {
                        PdfWriter writer = PdfWriter.getInstance(doc, new FileOutputStream(ruta + "\\" + "Nota_de_Compra_Interna_" + notaCompra + "_Fecha_" + fecha + "_hora_" + hora + ".pdf"));

                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(NotaCompra.class
                                .getName()).log(Level.SEVERE, null, ex);

                    }
                } catch (DocumentException ex) {
                    Logger.getLogger(DetalleNotaCompra.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                doc.open();
                //Añadir la imagen
                try {
                    //Establecer imagen y escala
                    Image logoAcima = Image.getInstance("src\\Imagenes\\acima-logo-400p.png");
                    logoAcima.scaleAbsolute(128, 68);
                    //Establecer párrafo
                    Paragraph nro = new Paragraph("Orden de compra interna, documento solo para uso interno de la empresa " + tblNC.getValueAt(index_tabla_nc, 1).toString(), FontFactory
                            .getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null)
                    );
                    nro.setAlignment(Paragraph.ALIGN_JUSTIFIED);

                    //Crear Tabla
                    PdfPTable tableHeader = new PdfPTable(2);
                    tableHeader.setWidthPercentage(100);

                    PdfPCell cell1 = new PdfPCell(logoAcima, false);
                    cell1.setBorder(Rectangle.NO_BORDER);
                    cell1.setBackgroundColor(BaseColor.WHITE);
                    cell1.setHorizontalAlignment(Element.ALIGN_RIGHT);

                    PdfPCell cell2 = new PdfPCell(nro);
                    cell2.setBorder(Rectangle.NO_BORDER);
                    cell2.setBackgroundColor(BaseColor.WHITE);
                    cell2.setHorizontalAlignment(Element.ALIGN_JUSTIFIED);

                    tableHeader.addCell(cell2);
                    tableHeader.addCell(cell1);
                    doc.add(tableHeader);

                    Paragraph numeroFacturaVenta = new Paragraph("Número de factura de venta: ______________________", FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, null));
                    numeroFacturaVenta.setAlignment(Paragraph.ALIGN_LEFT);
                    doc.add(numeroFacturaVenta);

                    Paragraph numeroNV = new Paragraph("N° de Orden de Compra interna: " + notaCompra, FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, null));
                    numeroNV.setAlignment(Paragraph.ALIGN_RIGHT);
                    doc.add(numeroNV);

                    Paragraph fechaEmision = new Paragraph("Fecha: " + fecha, FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, null));
                    fechaEmision.setAlignment(Paragraph.ALIGN_RIGHT);
                    doc.add(fechaEmision);

                } catch (BadElementException | IOException ex) {
                    Logger.getLogger(NotaCompra.class
                            .getName()).log(Level.SEVERE, null, ex);

                } catch (DocumentException ex) {
                    Logger.getLogger(DetalleNotaCompra.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

                //Query 
                String rut = "";
                String nombreProveedor = "";
                String direccionProveedor = "";
                String ciudadProveedor = "";
                String giro = "";
                String telefonoProveedor = "";

                String atencion = "";

                try {

                    String query = "select rut_proveedor,nombre_proveedor,direccion_proveedor,ciudad_proveedor,giro,telefono,contacto from proveedores where nombre_proveedor = ?;";
                    PreparedStatement pst = cn.prepareStatement(query);
                    pst.setString(1, proveedor);
                    ResultSet rs = pst.executeQuery();
                    while (rs.next()) {
                        if (rs.getString(1).isEmpty()) {
                            rut = "información no disponible";
                        } else {
                            rut = rs.getString(1);
                        }
                        if (rs.getString(2).isEmpty()) {
                            nombreProveedor = "información no disponible";
                        } else {
                            nombreProveedor = rs.getString(2);
                        }
                        if (rs.getString(3).isEmpty()) {
                            direccionProveedor = "información no disponible";
                        } else {
                            direccionProveedor = rs.getString(3);
                        }
                        if (rs.getString(4).isEmpty()) {
                            ciudadProveedor = "información no disponible";
                        } else {
                            ciudadProveedor = rs.getString(4);
                        }
                        if (rs.getString(5).isEmpty()) {
                            giro = "información no disponible";
                        } else {
                            giro = rs.getString(5);
                        }
                        if (rs.getString(6).isEmpty()) {
                            telefonoProveedor = "información no disponible";
                        } else {
                            telefonoProveedor = rs.getString(6);
                        }
                        if (rs.getString(7).isEmpty()) {
                            atencion = "información no disponible";
                        } else {
                            atencion = rs.getString(7);
                        }
                    }
                } catch (Exception ex) {
                    System.out.println("Error en query: " + ex);
                }

                //Añadir la información
                PdfPTable tableDatos = new PdfPTable(1);
                tableDatos.setWidthPercentage(100);

                PdfPCell cell1Proveedores = new PdfPCell(new Phrase("Proveedor", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
                cell1Proveedores.setUseBorderPadding(true);
                // Setting cell's background color
                cell1Proveedores.setBackgroundColor(BaseColor.ORANGE);

                tableDatos.addCell(cell1Proveedores);
                tableDatos.addCell(new Phrase("Razón Social: " + proveedor));
                tableDatos.addCell(new Phrase("Rut: " + rut, FontFactory.getFont(FontFactory.HELVETICA, 10)));
                tableDatos.addCell(new Phrase("Dirección: " + direccionProveedor, FontFactory.getFont(FontFactory.HELVETICA, 10)));
                tableDatos.addCell(new Phrase("Ciudad: " + ciudadProveedor, FontFactory.getFont(FontFactory.HELVETICA, 10)));
                tableDatos.addCell(new Phrase("Giro: " + giro, FontFactory.getFont(FontFactory.HELVETICA, 10)));
                tableDatos.addCell(new Phrase("Telefono: " + telefonoProveedor, FontFactory.getFont(FontFactory.HELVETICA, 10)));
                tableDatos.addCell(new Phrase("Atención a: " + atencion, FontFactory.getFont(FontFactory.HELVETICA, 10)));
                tableDatos.setSpacingBefore(15f);
                tableDatos.setWidthPercentage(100);
                tableDatos.getDefaultCell().setBorder(Rectangle.NO_BORDER);

                try {
                    doc.add(tableDatos);

                } catch (DocumentException ex) {
                    Logger.getLogger(DetalleNotaCompra.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

                try {
                    String query = "SELECT \n"
                            + "    codigoOrdenCompra as 'Código de Orden de Compra',\n"
                            + "    sku as 'SKU',\n"
                            + "    nombre as 'Producto',\n"
                            + "    cantidad as 'Cantidad',\n"
                            + "    precioCosto AS 'Valor Unitario de Compra',\n"
                            + "    precioCosto * cantidad AS 'Total de costo de Compra',\n"
                            + "    precioTotalNeto AS 'Total de Nota de Venta',\n"
                            + "    margen\n"
                            + "FROM\n"
                            + "    detalle_abastecimiento\n"
                            + "    where numeroCotizacion = ?;";
                    PreparedStatement pst;
                    pst = cn.prepareStatement(query);
                    pst.setString(1, notaCompra);
                    ResultSet rs = pst.executeQuery();
                    tblProductosDesechable.setModel(DbUtils.resultSetToTableModel(rs));
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }

                Paragraph tablas = new Paragraph("Resumen de Productos ", FontFactory.getFont(FontFactory.HELVETICA, 12, Font.NORMAL, null));
                try {
                    doc.add(tablas);

                } catch (DocumentException ex) {
                    Logger.getLogger(DetalleNotaCompra.class
                            .getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    PdfPTable pdfTable = new PdfPTable(8);
                    //Parámetros de espaciado y ancho
                    pdfTable.setSpacingBefore(15f);
                    pdfTable.setWidthPercentage(100);
                    //Añadir Valores

                    PdfPCell cell1 = new PdfPCell(new Phrase(tblProductosDesechable.getColumnName(0), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
                    cell1.setUseBorderPadding(true);
                    // Setting cell's background color
                    cell1.setBackgroundColor(BaseColor.ORANGE);

                    PdfPCell cell2 = new PdfPCell(new Phrase(tblProductosDesechable.getColumnName(1), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
                    cell2.setUseBorderPadding(true);
                    // Setting cell's background color
                    cell2.setBackgroundColor(BaseColor.ORANGE);

                    PdfPCell cell3 = new PdfPCell(new Phrase(tblProductosDesechable.getColumnName(2), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
                    cell3.setUseBorderPadding(true);
                    // Setting cell's background color
                    cell3.setBackgroundColor(BaseColor.ORANGE);

                    PdfPCell cell4 = new PdfPCell(new Phrase(tblProductosDesechable.getColumnName(3), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
                    cell4.setUseBorderPadding(true);
                    // Setting cell's background color
                    cell4.setBackgroundColor(BaseColor.ORANGE);

                    PdfPCell cell5 = new PdfPCell(new Phrase("Valor Unitario de Compra", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
                    cell5.setUseBorderPadding(true);
                    // Setting cell's background color
                    cell5.setBackgroundColor(BaseColor.ORANGE);

                    PdfPCell cell6 = new PdfPCell(new Phrase("Total de costo de compra", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
                    cell6.setUseBorderPadding(true);
                    // Setting cell's background color
                    cell6.setBackgroundColor(BaseColor.ORANGE);

                    PdfPCell cell7 = new PdfPCell(new Phrase("Total de Nota de Venta", FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
                    cell7.setUseBorderPadding(true);
                    // Setting cell's background color
                    cell7.setBackgroundColor(BaseColor.ORANGE);

                    PdfPCell cell8 = new PdfPCell(new Phrase(tblProductosDesechable.getColumnName(7), FontFactory.getFont(FontFactory.HELVETICA_BOLD, 10)));
                    cell8.setUseBorderPadding(true);
                    // Setting cell's background color
                    cell8.setBackgroundColor(BaseColor.ORANGE);

                    pdfTable.addCell(cell1);
                    pdfTable.addCell(cell2);
                    pdfTable.addCell(cell3);
                    pdfTable.addCell(cell4);
                    pdfTable.addCell(cell5);
                    pdfTable.addCell(cell6);
                    pdfTable.addCell(cell7);
                    pdfTable.addCell(cell8);

                    //Extraer valores de la Jtable al PDF
                    for (int rows = 0; rows < tblProductosDesechable.getRowCount(); rows++) {

                        DecimalFormat formatea = new DecimalFormat("###,###.##");

                        double valorUnitario = Integer.parseInt(tblProductosDesechable.getModel().getValueAt(rows, 4).toString());
                        double totalCosto = Integer.parseInt(tblProductosDesechable.getModel().getValueAt(rows, 5).toString());
                        double totalNV = Integer.parseInt(tblProductosDesechable.getModel().getValueAt(rows, 6).toString());

                        pdfTable.addCell(new Phrase(tblProductosDesechable.getModel().getValueAt(rows, 0).toString(), FontFactory.getFont(FontFactory.HELVETICA, 9)));
                        pdfTable.addCell(new Phrase(tblProductosDesechable.getModel().getValueAt(rows, 1).toString(), FontFactory.getFont(FontFactory.HELVETICA, 9)));
                        pdfTable.addCell(new Phrase(tblProductosDesechable.getModel().getValueAt(rows, 2).toString(), FontFactory.getFont(FontFactory.HELVETICA, 9)));
                        pdfTable.addCell(new Phrase(tblProductosDesechable.getModel().getValueAt(rows, 3).toString(), FontFactory.getFont(FontFactory.HELVETICA, 9)));
                        pdfTable.addCell(new Phrase("$" + formatea.format(valorUnitario), FontFactory.getFont(FontFactory.HELVETICA, 9)));
                        pdfTable.addCell(new Phrase("$" + formatea.format(totalCosto), FontFactory.getFont(FontFactory.HELVETICA, 9)));
                        pdfTable.addCell(new Phrase("$" + formatea.format(totalNV), FontFactory.getFont(FontFactory.HELVETICA, 9)));
                        pdfTable.addCell(new Phrase(tblProductosDesechable.getModel().getValueAt(rows, 7).toString() + "%", FontFactory.getFont(FontFactory.HELVETICA, 9)));
                    }
                    pdfTable.setWidths(new int[]{1, 1, 2, 1, 1, 1, 1, 1});
                    doc.add(pdfTable);
                } catch (DocumentException ex) {
                    JOptionPane.showMessageDialog(null, "Ha ocurrido un error: tabla" + ex.getMessage());
                }
                DecimalFormat formatea = new DecimalFormat("###,###.##");

                iva = (neto * 0.19);
                total_abastecimiento = neto + iva;

                Paragraph netoPar = new Paragraph("Neto: " + "$" + formatea.format(neto), FontFactory.getFont(FontFactory.HELVETICA, 10, Font.NORMAL, null));
                netoPar.setAlignment(Paragraph.ALIGN_RIGHT);
                Paragraph ivaPar = new Paragraph("IVA: " + "$" + formatea.format(iva), FontFactory.getFont(FontFactory.HELVETICA, 10, Font.NORMAL, null));
                ivaPar.setAlignment(Paragraph.ALIGN_RIGHT);
                Paragraph totalPar = new Paragraph("Total: " + "$" + formatea.format(total_abastecimiento), FontFactory.getFont(FontFactory.HELVETICA, 10, Font.NORMAL, null));
                totalPar.setAlignment(Paragraph.ALIGN_RIGHT);
                doc.add(netoPar);
                doc.add(ivaPar);
                doc.add(totalPar);

                //Nota
                Paragraph nota = new Paragraph("Nota: Forma de Pago "
                        + formaPago + " - "
                        + " "
                        + "Tiempo de despacho: " + demoraDespacho, FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD, null));
                nota.setAlignment(Paragraph.ALIGN_JUSTIFIED);
                doc.add(nota);

                //Información de contacto
                Paragraph telefono = new Paragraph("Esta orden debe estar firmada por el responsable directo, de lo contrario, se prohibe la compra", FontFactory.getFont(FontFactory.HELVETICA, 9, Font.NORMAL, null));
                telefono.setAlignment(Paragraph.ALIGN_JUSTIFIED);
                try {
                    doc.add(telefono);

                } catch (DocumentException ex) {
                    Logger.getLogger(DetalleNotaCompra.class
                            .getName()).log(Level.SEVERE, null, ex);
                }

                //Firma
                Image firma;

                firma = Image.getInstance("src\\Imagenes\\firma_rony_vacia.png");
                firma.setAlignment(Paragraph.ALIGN_CENTER);

                doc.add(firma);

                //Finalizar documento
                doc.close();
                JOptionPane.showMessageDialog(null, "PDF Generado Correctamente");

            } catch (DocumentException ex) {
                Logger.getLogger(NotaCompra.class
                        .getName()).log(Level.SEVERE, null, ex);

            } catch (IOException ex) {
                Logger.getLogger(NotaCompra.class
                        .getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_tblNCMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            String query = "SELECT \n"
                    + "    a.numeroCotizacion AS 'OC de Proveedor',\n"
                    + "    da.idOrden AS 'N° de nota de venta',\n"
                    + "    a.codigoOrdenCompra AS 'Código de Orden de Compra',\n"
                    + "    a.distribuidor AS 'Distribuidor',\n"
                    + "    CONCAT(SUBSTRING(a.fecha, 9, 2),\n"
                    + "            '-',\n"
                    + "            SUBSTRING(a.fecha, 6, 2),\n"
                    + "            '-',\n"
                    + "            SUBSTRING(a.fecha, 1, 4)) AS 'Fecha de cotización',\n"
                    + "    SUBSTRING(a.demoradespacho, 1, 2) AS 'Días Hábiles',\n"
                    + "    a.proveedor AS 'Proveedor',\n"
                    + "    a.estado AS 'Estado'\n"
                    + "FROM\n"
                    + "    abastecimiento a\n"
                    + "        LEFT JOIN\n"
                    + "    detalle_abastecimiento da ON a.codigoOrdenCompra = da.codigoOrdenCompra\n"
                    + "WHERE\n"
                    + "    a.estado IN ('Comprado' , 'Nota de compra ingresada con productos faltantes',\n"
                    + "        'Enviado a Proveedor') and a.numeroCotizacion RLIKE ?\n"
                    + "GROUP BY a.numeroCotizacion;\n";
            PreparedStatement pst;
            pst = cn.prepareStatement(query);
            pst.setInt(1, Integer.parseInt(txtCotizacion.getText()));
            ResultSet rs = pst.executeQuery();
            tblNC.setModel(DbUtils.resultSetToTableModel(rs));

        } catch (SQLException ex) {
            Logger.getLogger(Seguimiento.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void cmbDistribuidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDistribuidorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbDistribuidorActionPerformed

    private void rdbAntiguoNuevoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rdbAntiguoNuevoItemStateChanged
        try {
            String queryActualizar = "SELECT \n"
                    + "a.numeroCotizacion AS 'OC de Proveedor',\n"
                    + "da.idOrden AS 'N° de nota de venta',\n"
                    + "a.codigoOrdenCompra AS 'Código de Orden de Compra',\n"
                    + "a.distribuidor AS 'Distribuidor',\n"
                    + "CONCAT(SUBSTRING(a.fecha, 9, 2),\n"
                    + "        '-',\n"
                    + "        SUBSTRING(a.fecha, 6, 2),\n"
                    + "        '-',\n"
                    + "        SUBSTRING(a.fecha, 1, 4)) AS 'Fecha de cotización',\n"
                    + "SUBSTRING(a.demoradespacho, 1, 2) AS 'Días Hábiles para arribo de mercadería',\n"
                    + "a.proveedor AS 'Proveedor',\n"
                    + "a.estado AS 'Estado'\n"
                    + "FROM\n"
                    + "abastecimiento a\n"
                    + "    LEFT JOIN\n"
                    + "detalle_abastecimiento da ON a.codigoOrdenCompra = da.codigoOrdenCompra\n"
                    + "WHERE\n"
                    + "a.estado IN ('Comprado' , 'Nota de compra ingresada con productos faltantes',\n"
                    + "    'Enviado a Proveedor')\n"
                    + "GROUP BY a.numeroCotizacion\n"
                    + "ORDER BY a.fecha asc;";
            PreparedStatement pst = cn.prepareStatement(queryActualizar);
            ResultSet rs = pst.executeQuery();
            tblNC.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_rdbAntiguoNuevoItemStateChanged

    private void jRadioButton2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton2ItemStateChanged
        try {
            String queryActualizar = "SELECT \n"
                    + "a.numeroCotizacion AS 'OC de Proveedor',\n"
                    + "da.idOrden AS 'N° de nota de venta',\n"
                    + "a.codigoOrdenCompra AS 'Código de Orden de Compra',\n"
                    + "a.distribuidor AS 'Distribuidor',\n"
                    + "CONCAT(SUBSTRING(a.fecha, 9, 2),\n"
                    + "        '-',\n"
                    + "        SUBSTRING(a.fecha, 6, 2),\n"
                    + "        '-',\n"
                    + "        SUBSTRING(a.fecha, 1, 4)) AS 'Fecha de cotización',\n"
                    + "SUBSTRING(a.demoradespacho, 1, 2) AS 'Días Hábiles para arribo de mercadería',\n"
                    + "a.proveedor AS 'Proveedor',\n"
                    + "a.estado AS 'Estado'\n"
                    + "FROM\n"
                    + "abastecimiento a\n"
                    + "    LEFT JOIN\n"
                    + "detalle_abastecimiento da ON a.codigoOrdenCompra = da.codigoOrdenCompra\n"
                    + "WHERE\n"
                    + "a.estado IN ('Comprado' , 'Nota de compra ingresada con productos faltantes',\n"
                    + "    'Enviado a Proveedor')\n"
                    + "GROUP BY a.numeroCotizacion\n"
                    + "ORDER BY a.fecha desc;";
            PreparedStatement pst = cn.prepareStatement(queryActualizar);
            ResultSet rs = pst.executeQuery();
            tblNC.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_jRadioButton2ItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NotaCompra.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NotaCompra.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NotaCompra.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NotaCompra.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NotaCompra().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarOC;
    public javax.swing.JButton btnReiniciarFiltros;
    private javax.swing.JButton btnSalir3;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    public javax.swing.JComboBox cmbDistribuidor;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton rdbAntiguoNuevo;
    public javax.swing.JTable tblNC;
    private javax.swing.JTable tblProductosDesechable;
    private javax.swing.JTextField txtCodigoOrdenCompra;
    private javax.swing.JTextField txtCotizacion;
    private javax.swing.JTextField txtNumNV;
    // End of variables declaration//GEN-END:variables
}
